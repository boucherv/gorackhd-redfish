package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Manager100Manager This is the schema definition for a Manager.  Examples of managers are BMCs, Enclosure Managers, Management Controllers and other subsystems assigned managability functions.

swagger:model Manager.1.0.0_Manager
*/
type Manager100Manager struct {

	/* at odata context
	 */
	AtOdataContext Odata400Context `json:"@odata.context,omitempty"`

	/* at odata id
	 */
	AtOdataID Odata400ID `json:"@odata.id,omitempty"`

	/* at odata type
	 */
	AtOdataType Odata400Type `json:"@odata.type,omitempty"`

	/* actions
	 */
	Actions *Manager100ManagerActions `json:"Actions,omitempty"`

	/* Information about the Command Shell service provided by this manager.
	 */
	CommandShell *Manager100CommandShell `json:"CommandShell,omitempty"`

	/* The current DateTime (with offset) for the manager, used to set or read time.
	 */
	DateTime strfmt.DateTime `json:"DateTime,omitempty"`

	/* The time offset from UTC that the DateTime property is set to in format: +06:00 .

	Pattern: ([-+][0-1][0-9]:[0-5][0-9])
	*/
	DateTimeLocalOffset string `json:"DateTimeLocalOffset,omitempty"`

	/* description
	 */
	Description ResourceDescription `json:"Description,omitempty"`

	/* This is a reference to a collection of NICs that this manager uses for network communication.  It is here that clients will find NIC configuration options and settings.

	Read Only: true
	*/
	EthernetInterfaces *EthernetInterfaceCollectionEthernetInterfaceCollection `json:"EthernetInterfaces,omitempty"`

	/* The firmware version of this Manager

	Read Only: true
	*/
	FirmwareVersion string `json:"FirmwareVersion,omitempty"`

	/* The value of this property shall contain the information about the Graphical Console (KVM-IP) service of this manager.
	 */
	GraphicalConsole *Manager100GraphicalConsole `json:"GraphicalConsole,omitempty"`

	/* Id
	 */
	ID ResourceID `json:"Id,omitempty"`

	/* links
	 */
	Links *Manager100ManagerLinks `json:"Links,omitempty"`

	/* This is a reference to a collection of Logs used by the manager.

	Read Only: true
	*/
	LogServices *LogServiceCollectionLogServiceCollection `json:"LogServices,omitempty"`

	/* This property represents the type of manager that this resource represents.

	Read Only: true
	*/
	ManagerType Manager100ManagerType `json:"ManagerType,omitempty"`

	/* The model information of this Manager as defined by the manufacturer

	Read Only: true
	*/
	Model string `json:"Model,omitempty"`

	/* name
	 */
	Name ResourceName `json:"Name,omitempty"`

	/* This is a reference to the network services and their settings that the manager controls.  It is here that clients will find network configuration options as well as network services.

	Read Only: true
	*/
	NetworkProtocol *ManagerNetworkProtocol100ManagerNetworkProtocol `json:"NetworkProtocol,omitempty"`

	/* This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* Redundancy information for the managers of this system

	Read Only: true
	*/
	Redundancy []RedundancyRedundancy `json:"Redundancy,omitempty"`

	/* redundancy at odata count
	 */
	RedundancyAtOdataCount Odata400Count `json:"Redundancy@odata.count,omitempty"`

	/* redundancy at odata navigation link
	 */
	RedundancyAtOdataNavigationLink *Odata400IDRef `json:"Redundancy@odata.navigationLink,omitempty"`

	/* Information about the Serial Console service provided by this manager.
	 */
	SerialConsole *Manager100SerialConsole `json:"SerialConsole,omitempty"`

	/* This is a reference to a collection of serial interfaces that this manager uses for serial and console communication.  It is here that clients will find serial configuration options and settings.

	Read Only: true
	*/
	SerialInterfaces *SerialInterfaceCollectionSerialInterfaceCollection `json:"SerialInterfaces,omitempty"`

	/* The UUID of the Redfish Service Entry Point provided by this manager

	Read Only: true
	*/
	ServiceEntryPointUUID ResourceUUID `json:"ServiceEntryPointUUID,omitempty"`

	/* status
	 */
	Status *ResourceStatus `json:"Status,omitempty"`

	/* The Universal Unique Identifier (UUID) for this Manager

	Read Only: true
	*/
	UUID ResourceUUID `json:"UUID,omitempty"`

	/* This is a reference to the Virtual Media services for this particular manager.

	Read Only: true
	*/
	VirtualMedia *VirtualMediaCollectionVirtualMediaCollection `json:"VirtualMedia,omitempty"`
}

// Validate validates this manager 1 0 0 manager
func (m *Manager100Manager) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateTimeLocalOffset(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateManagerType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRedundancy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceEntryPointUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Manager100Manager) validateDateTimeLocalOffset(formats strfmt.Registry) error {

	if swag.IsZero(m.DateTimeLocalOffset) { // not required
		return nil
	}

	if err := validate.Pattern("DateTimeLocalOffset", "body", string(m.DateTimeLocalOffset), `([-+][0-1][0-9]:[0-5][0-9])`); err != nil {
		return err
	}

	return nil
}

func (m *Manager100Manager) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Manager100Manager) validateManagerType(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagerType) { // not required
		return nil
	}

	if err := m.ManagerType.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Manager100Manager) validateRedundancy(formats strfmt.Registry) error {

	if swag.IsZero(m.Redundancy) { // not required
		return nil
	}

	return nil
}

func (m *Manager100Manager) validateServiceEntryPointUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceEntryPointUUID) { // not required
		return nil
	}

	if err := m.ServiceEntryPointUUID.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Manager100Manager) validateUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := m.UUID.Validate(formats); err != nil {
		return err
	}

	return nil
}

/*Manager100ManagerActions The Actions object contains the available custom actions on this resource.

swagger:model Manager100ManagerActions
*/
type Manager100ManagerActions struct {

	/* manager force failover
	 */
	NrManagerForceFailover *Manager100ForceFailover `json:"#Manager.ForceFailover,omitempty"`

	/* manager modify redundancy set
	 */
	NrManagerModifyRedundancySet *Manager100ModifyRedundancySet `json:"#Manager.ModifyRedundancySet,omitempty"`

	/* manager reset
	 */
	NrManagerReset *Manager100Reset `json:"#Manager.Reset,omitempty"`

	/* oem
	 */
	Oem interface{} `json:"Oem,omitempty"`
}

// Validate validates this manager100 manager actions
func (m *Manager100ManagerActions) Validate(formats strfmt.Registry) error {
	return nil
}

/*Manager100ManagerLinks This object contains the links to other resources that are related to this resource.

swagger:model Manager100ManagerLinks
*/
type Manager100ManagerLinks struct {

	/* This property is an array of references to the chasis that this manager has control over.

	Read Only: true
	*/
	ManagerForChassis []ChassisChassis `json:"ManagerForChassis,omitempty"`

	/* manager for chassis at odata count
	 */
	ManagerForChassisAtOdataCount Odata400Count `json:"ManagerForChassis@odata.count,omitempty"`

	/* manager for chassis at odata navigation link
	 */
	ManagerForChassisAtOdataNavigationLink *Odata400IDRef `json:"ManagerForChassis@odata.navigationLink,omitempty"`

	/* This property is an array of references to the systems that this manager has control over.

	Read Only: true
	*/
	ManagerForServers []ComputerSystemComputerSystem `json:"ManagerForServers,omitempty"`

	/* manager for servers at odata count
	 */
	ManagerForServersAtOdataCount Odata400Count `json:"ManagerForServers@odata.count,omitempty"`

	/* manager for servers at odata navigation link
	 */
	ManagerForServersAtOdataNavigationLink *Odata400IDRef `json:"ManagerForServers@odata.navigationLink,omitempty"`

	/* Oem extension object.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`
}

// Validate validates this manager100 manager links
func (m *Manager100ManagerLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagerForChassis(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateManagerForServers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Manager100ManagerLinks) validateManagerForChassis(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagerForChassis) { // not required
		return nil
	}

	return nil
}

func (m *Manager100ManagerLinks) validateManagerForServers(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagerForServers) { // not required
		return nil
	}

	return nil
}
