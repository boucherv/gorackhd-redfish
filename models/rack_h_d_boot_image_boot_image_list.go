package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*RackHDBootImageBootImageList rack h d boot image boot image list

swagger:model RackHD_BootImage_BootImageList
*/
type RackHDBootImageBootImageList struct {

	/* at odata type
	 */
	AtOdataType Odata400Type `json:"@odata.type,omitempty"`

	/* os name
	 */
	OsName string `json:"osName,omitempty"`
}

// Validate validates this rack h d boot image boot image list
func (m *RackHDBootImageBootImageList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOsName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rackHDBootImageBootImageListTypeOsNamePropEnum []interface{}

// prop value enum
func (m *RackHDBootImageBootImageList) validateOsNameEnum(path, location string, value string) error {
	if rackHDBootImageBootImageListTypeOsNamePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["CentOS","CentOS+KVM","ESXi","RHEL","RHEL+KVM"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			rackHDBootImageBootImageListTypeOsNamePropEnum = append(rackHDBootImageBootImageListTypeOsNamePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, rackHDBootImageBootImageListTypeOsNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RackHDBootImageBootImageList) validateOsName(formats strfmt.Registry) error {

	if swag.IsZero(m.OsName) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsNameEnum("osName", "body", m.OsName); err != nil {
		return err
	}

	return nil
}
