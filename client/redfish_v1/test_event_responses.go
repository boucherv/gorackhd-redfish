package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// TestEventReader is a Reader for the TestEvent structure.
type TestEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *TestEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTestEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewTestEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewTestEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewTestEventNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTestEventOK creates a TestEventOK with default headers values
func NewTestEventOK() *TestEventOK {
	return &TestEventOK{}
}

/*TestEventOK handles this case with default header values.

Success
*/
type TestEventOK struct {
}

func (o *TestEventOK) Error() string {
	return fmt.Sprintf("[POST /EventService/Actions/EventService.SubmitTestEvent][%d] testEventOK ", 200)
}

func (o *TestEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTestEventUnauthorized creates a TestEventUnauthorized with default headers values
func NewTestEventUnauthorized() *TestEventUnauthorized {
	return &TestEventUnauthorized{}
}

/*TestEventUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type TestEventUnauthorized struct {
}

func (o *TestEventUnauthorized) Error() string {
	return fmt.Sprintf("[POST /EventService/Actions/EventService.SubmitTestEvent][%d] testEventUnauthorized ", 401)
}

func (o *TestEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTestEventForbidden creates a TestEventForbidden with default headers values
func NewTestEventForbidden() *TestEventForbidden {
	return &TestEventForbidden{}
}

/*TestEventForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not  possess authorization to perform this request.

*/
type TestEventForbidden struct {
}

func (o *TestEventForbidden) Error() string {
	return fmt.Sprintf("[POST /EventService/Actions/EventService.SubmitTestEvent][%d] testEventForbidden ", 403)
}

func (o *TestEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTestEventNotImplemented creates a TestEventNotImplemented with default headers values
func NewTestEventNotImplemented() *TestEventNotImplemented {
	return &TestEventNotImplemented{}
}

/*TestEventNotImplemented handles this case with default header values.

The server does not (currently) support the functionality required to fulfill the request.  This is the appropriate response when the server does not recognize the request method  and is not capable of supporting the method for any resource.

*/
type TestEventNotImplemented struct {
}

func (o *TestEventNotImplemented) Error() string {
	return fmt.Sprintf("[POST /EventService/Actions/EventService.SubmitTestEvent][%d] testEventNotImplemented ", 501)
}

func (o *TestEventNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
