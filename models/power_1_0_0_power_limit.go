package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Power100PowerLimit This object contains power limit status and configuration information for the chassis.

swagger:model Power.1.0.0_PowerLimit
*/
type Power100PowerLimit struct {

	/* The time required for the limiting process to reduce power consumption to below the limit.
	 */
	CorrectionInMs float64 `json:"CorrectionInMs,omitempty"`

	/* The action that is taken if the power cannot be maintained below the LimitInWatts.
	 */
	LimitException Power100PowerLimitException `json:"LimitException,omitempty"`

	/* The Power limit in watts. Set to null to disable power capping.

	Minimum: 0
	*/
	LimitInWatts *float64 `json:"LimitInWatts,omitempty"`
}

// Validate validates this power 1 0 0 power limit
func (m *Power100PowerLimit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimitException(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLimitInWatts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Power100PowerLimit) validateLimitException(formats strfmt.Registry) error {

	if swag.IsZero(m.LimitException) { // not required
		return nil
	}

	if err := m.LimitException.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Power100PowerLimit) validateLimitInWatts(formats strfmt.Registry) error {

	if swag.IsZero(m.LimitInWatts) { // not required
		return nil
	}

	if err := validate.Minimum("LimitInWatts", "body", float64(*m.LimitInWatts), 0, false); err != nil {
		return err
	}

	return nil
}
