package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/emccode/gorackhd-redfish/models"
)

// GetManagersReader is a Reader for the GetManagers structure.
type GetManagersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetManagersReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetManagersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetManagersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetManagersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetManagersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetManagersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetManagersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, client.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetManagersOK creates a GetManagersOK with default headers values
func NewGetManagersOK() *GetManagersOK {
	return &GetManagersOK{}
}

/*GetManagersOK handles this case with default header values.

Success
*/
type GetManagersOK struct {
	Payload *models.ManagerCollectionManagerCollection
}

func (o *GetManagersOK) Error() string {
	return fmt.Sprintf("[GET /Managers][%d] getManagersOK  %+v", 200, o.Payload)
}

func (o *GetManagersOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ManagerCollectionManagerCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetManagersBadRequest creates a GetManagersBadRequest with default headers values
func NewGetManagersBadRequest() *GetManagersBadRequest {
	return &GetManagersBadRequest{}
}

/*GetManagersBadRequest handles this case with default header values.

The request could not be processed because it contains missing or invalid information  (such as validation error on an input field, a missing required value, and so on).  An extended error shall be returned in the response body, as defined in section Extended  Error Handling.

*/
type GetManagersBadRequest struct {
}

func (o *GetManagersBadRequest) Error() string {
	return fmt.Sprintf("[GET /Managers][%d] getManagersBadRequest ", 400)
}

func (o *GetManagersBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetManagersUnauthorized creates a GetManagersUnauthorized with default headers values
func NewGetManagersUnauthorized() *GetManagersUnauthorized {
	return &GetManagersUnauthorized{}
}

/*GetManagersUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type GetManagersUnauthorized struct {
}

func (o *GetManagersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /Managers][%d] getManagersUnauthorized ", 401)
}

func (o *GetManagersUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetManagersForbidden creates a GetManagersForbidden with default headers values
func NewGetManagersForbidden() *GetManagersForbidden {
	return &GetManagersForbidden{}
}

/*GetManagersForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not  possess authorization to perform this request.

*/
type GetManagersForbidden struct {
}

func (o *GetManagersForbidden) Error() string {
	return fmt.Sprintf("[GET /Managers][%d] getManagersForbidden ", 403)
}

func (o *GetManagersForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetManagersNotFound creates a GetManagersNotFound with default headers values
func NewGetManagersNotFound() *GetManagersNotFound {
	return &GetManagersNotFound{}
}

/*GetManagersNotFound handles this case with default header values.

The request specified a URI of a resource that does not exist.

*/
type GetManagersNotFound struct {
}

func (o *GetManagersNotFound) Error() string {
	return fmt.Sprintf("[GET /Managers][%d] getManagersNotFound ", 404)
}

func (o *GetManagersNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetManagersInternalServerError creates a GetManagersInternalServerError with default headers values
func NewGetManagersInternalServerError() *GetManagersInternalServerError {
	return &GetManagersInternalServerError{}
}

/*GetManagersInternalServerError handles this case with default header values.

Error
*/
type GetManagersInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetManagersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /Managers][%d] getManagersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetManagersInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
