package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/emccode/gorackhd-redfish/models"
)

// CreateSubscriptionReader is a Reader for the CreateSubscription structure.
type CreateSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *CreateSubscriptionReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCreateSubscriptionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateSubscriptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewCreateSubscriptionNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, client.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateSubscriptionOK creates a CreateSubscriptionOK with default headers values
func NewCreateSubscriptionOK() *CreateSubscriptionOK {
	return &CreateSubscriptionOK{}
}

/*CreateSubscriptionOK handles this case with default header values.

Success
*/
type CreateSubscriptionOK struct {
	Payload *models.EventDestinationCollectionEventDestinationCollection
}

func (o *CreateSubscriptionOK) Error() string {
	return fmt.Sprintf("[POST /EventService/Subscriptions][%d] createSubscriptionOK  %+v", 200, o.Payload)
}

func (o *CreateSubscriptionOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventDestinationCollectionEventDestinationCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionUnauthorized creates a CreateSubscriptionUnauthorized with default headers values
func NewCreateSubscriptionUnauthorized() *CreateSubscriptionUnauthorized {
	return &CreateSubscriptionUnauthorized{}
}

/*CreateSubscriptionUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type CreateSubscriptionUnauthorized struct {
}

func (o *CreateSubscriptionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /EventService/Subscriptions][%d] createSubscriptionUnauthorized ", 401)
}

func (o *CreateSubscriptionUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubscriptionForbidden creates a CreateSubscriptionForbidden with default headers values
func NewCreateSubscriptionForbidden() *CreateSubscriptionForbidden {
	return &CreateSubscriptionForbidden{}
}

/*CreateSubscriptionForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not  possess authorization to perform this request.

*/
type CreateSubscriptionForbidden struct {
}

func (o *CreateSubscriptionForbidden) Error() string {
	return fmt.Sprintf("[POST /EventService/Subscriptions][%d] createSubscriptionForbidden ", 403)
}

func (o *CreateSubscriptionForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubscriptionNotImplemented creates a CreateSubscriptionNotImplemented with default headers values
func NewCreateSubscriptionNotImplemented() *CreateSubscriptionNotImplemented {
	return &CreateSubscriptionNotImplemented{}
}

/*CreateSubscriptionNotImplemented handles this case with default header values.

The server does not (currently) support the functionality required to fulfill the request.  This is the appropriate response when the server does not recognize the request method  and is not capable of supporting the method for any resource.

*/
type CreateSubscriptionNotImplemented struct {
}

func (o *CreateSubscriptionNotImplemented) Error() string {
	return fmt.Sprintf("[POST /EventService/Subscriptions][%d] createSubscriptionNotImplemented ", 501)
}

func (o *CreateSubscriptionNotImplemented) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
