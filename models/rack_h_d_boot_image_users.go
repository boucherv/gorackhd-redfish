package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*RackHDBootImageUsers rack h d boot image users

swagger:model RackHD_BootImage_Users
*/
type RackHDBootImageUsers struct {

	/* This is the name of user

	Required: true
	*/
	Name *string `json:"name"`

	/* This is the password of user, it should pass the clear text, OnRack will do encryption before storing it into a kickstart file.

	Required: true
	*/
	Password *string `json:"password"`

	/* This is the SSH key that will be appended into the file ~/.ssh/authorized_keys
	 */
	SSHKey string `json:"sshKey,omitempty"`

	/* The unique identifier of user

	Required: true
	*/
	UID *float64 `json:"uid"`
}

// Validate validates this rack h d boot image users
func (m *RackHDBootImageUsers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RackHDBootImageUsers) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageUsers) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageUsers) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}
