package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*RackHDBootImageBootImage This is the base type for the boot image installation action.

swagger:model RackHD.BootImage_BootImage
*/
type RackHDBootImageBootImage struct {

	/* dns servers

	Required: true
	*/
	DNSServers []string `json:"dnsServers"`

	/* domain

	Required: true
	*/
	Domain *string `json:"domain"`

	/* hostname

	Required: true
	*/
	Hostname *string `json:"hostname"`

	/* install disk
	 */
	InstallDisk string `json:"installDisk,omitempty"`

	/* network devices
	 */
	NetworkDevices []*RackHDBootImageNetworkDevice `json:"networkDevices,omitempty"`

	/* os name

	Required: true
	*/
	OsName *string `json:"osName"`

	/* repo
	 */
	Repo string `json:"repo,omitempty"`

	/* root password

	Required: true
	*/
	RootPassword *string `json:"rootPassword"`

	/* root Ssh key
	 */
	RootSSHKey string `json:"rootSshKey,omitempty"`

	/* users
	 */
	Users []*RackHDBootImageUsers `json:"users,omitempty"`

	/* version
	 */
	Version string `json:"version,omitempty"`
}

// Validate validates this rack h d boot image boot image
func (m *RackHDBootImageBootImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSServers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkDevices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOsName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRootPassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RackHDBootImageBootImage) validateDNSServers(formats strfmt.Registry) error {

	if err := validate.Required("dnsServers", "body", m.DNSServers); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateNetworkDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkDevices); i++ {

		if swag.IsZero(m.NetworkDevices[i]) { // not required
			continue
		}

		if m.NetworkDevices[i] != nil {

			if err := m.NetworkDevices[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

var rackHDBootImageBootImageTypeOsNamePropEnum []interface{}

// prop value enum
func (m *RackHDBootImageBootImage) validateOsNameEnum(path, location string, value string) error {
	if rackHDBootImageBootImageTypeOsNamePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["CentOS","CentOS+KVM","ESXi","RHEL","RHEL+KVM"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			rackHDBootImageBootImageTypeOsNamePropEnum = append(rackHDBootImageBootImageTypeOsNamePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, rackHDBootImageBootImageTypeOsNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RackHDBootImageBootImage) validateOsName(formats strfmt.Registry) error {

	if err := validate.Required("osName", "body", m.OsName); err != nil {
		return err
	}

	// value enum
	if err := m.validateOsNameEnum("osName", "body", *m.OsName); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateRootPassword(formats strfmt.Registry) error {

	if err := validate.Required("rootPassword", "body", m.RootPassword); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {

		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {

			if err := m.Users[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
