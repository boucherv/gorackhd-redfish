package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/emccode/gorackhd-redfish/models"
)

// GetSystemsIdentifierEthernetInterfacesReader is a Reader for the GetSystemsIdentifierEthernetInterfaces structure.
type GetSystemsIdentifierEthernetInterfacesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetSystemsIdentifierEthernetInterfacesReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSystemsIdentifierEthernetInterfacesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSystemsIdentifierEthernetInterfacesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetSystemsIdentifierEthernetInterfacesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetSystemsIdentifierEthernetInterfacesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSystemsIdentifierEthernetInterfacesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSystemsIdentifierEthernetInterfacesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, client.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSystemsIdentifierEthernetInterfacesOK creates a GetSystemsIdentifierEthernetInterfacesOK with default headers values
func NewGetSystemsIdentifierEthernetInterfacesOK() *GetSystemsIdentifierEthernetInterfacesOK {
	return &GetSystemsIdentifierEthernetInterfacesOK{}
}

/*GetSystemsIdentifierEthernetInterfacesOK handles this case with default header values.

Success
*/
type GetSystemsIdentifierEthernetInterfacesOK struct {
	Payload *models.EthernetInterfaceCollectionEthernetInterfaceCollection
}

func (o *GetSystemsIdentifierEthernetInterfacesOK) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/EthernetInterfaces][%d] getSystemsIdentifierEthernetInterfacesOK  %+v", 200, o.Payload)
}

func (o *GetSystemsIdentifierEthernetInterfacesOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EthernetInterfaceCollectionEthernetInterfaceCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSystemsIdentifierEthernetInterfacesBadRequest creates a GetSystemsIdentifierEthernetInterfacesBadRequest with default headers values
func NewGetSystemsIdentifierEthernetInterfacesBadRequest() *GetSystemsIdentifierEthernetInterfacesBadRequest {
	return &GetSystemsIdentifierEthernetInterfacesBadRequest{}
}

/*GetSystemsIdentifierEthernetInterfacesBadRequest handles this case with default header values.

The request could not be processed because it contains missing or invalid information  (such as validation error on an input field, a missing required value, and so on).  An extended error shall be returned in the response body, as defined in section Extended  Error Handling.

*/
type GetSystemsIdentifierEthernetInterfacesBadRequest struct {
}

func (o *GetSystemsIdentifierEthernetInterfacesBadRequest) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/EthernetInterfaces][%d] getSystemsIdentifierEthernetInterfacesBadRequest ", 400)
}

func (o *GetSystemsIdentifierEthernetInterfacesBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSystemsIdentifierEthernetInterfacesUnauthorized creates a GetSystemsIdentifierEthernetInterfacesUnauthorized with default headers values
func NewGetSystemsIdentifierEthernetInterfacesUnauthorized() *GetSystemsIdentifierEthernetInterfacesUnauthorized {
	return &GetSystemsIdentifierEthernetInterfacesUnauthorized{}
}

/*GetSystemsIdentifierEthernetInterfacesUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type GetSystemsIdentifierEthernetInterfacesUnauthorized struct {
}

func (o *GetSystemsIdentifierEthernetInterfacesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/EthernetInterfaces][%d] getSystemsIdentifierEthernetInterfacesUnauthorized ", 401)
}

func (o *GetSystemsIdentifierEthernetInterfacesUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSystemsIdentifierEthernetInterfacesForbidden creates a GetSystemsIdentifierEthernetInterfacesForbidden with default headers values
func NewGetSystemsIdentifierEthernetInterfacesForbidden() *GetSystemsIdentifierEthernetInterfacesForbidden {
	return &GetSystemsIdentifierEthernetInterfacesForbidden{}
}

/*GetSystemsIdentifierEthernetInterfacesForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not  possess authorization to perform this request.

*/
type GetSystemsIdentifierEthernetInterfacesForbidden struct {
}

func (o *GetSystemsIdentifierEthernetInterfacesForbidden) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/EthernetInterfaces][%d] getSystemsIdentifierEthernetInterfacesForbidden ", 403)
}

func (o *GetSystemsIdentifierEthernetInterfacesForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSystemsIdentifierEthernetInterfacesNotFound creates a GetSystemsIdentifierEthernetInterfacesNotFound with default headers values
func NewGetSystemsIdentifierEthernetInterfacesNotFound() *GetSystemsIdentifierEthernetInterfacesNotFound {
	return &GetSystemsIdentifierEthernetInterfacesNotFound{}
}

/*GetSystemsIdentifierEthernetInterfacesNotFound handles this case with default header values.

The request specified a URI of a resource that does not exist.

*/
type GetSystemsIdentifierEthernetInterfacesNotFound struct {
}

func (o *GetSystemsIdentifierEthernetInterfacesNotFound) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/EthernetInterfaces][%d] getSystemsIdentifierEthernetInterfacesNotFound ", 404)
}

func (o *GetSystemsIdentifierEthernetInterfacesNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSystemsIdentifierEthernetInterfacesInternalServerError creates a GetSystemsIdentifierEthernetInterfacesInternalServerError with default headers values
func NewGetSystemsIdentifierEthernetInterfacesInternalServerError() *GetSystemsIdentifierEthernetInterfacesInternalServerError {
	return &GetSystemsIdentifierEthernetInterfacesInternalServerError{}
}

/*GetSystemsIdentifierEthernetInterfacesInternalServerError handles this case with default header values.

Error
*/
type GetSystemsIdentifierEthernetInterfacesInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetSystemsIdentifierEthernetInterfacesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/EthernetInterfaces][%d] getSystemsIdentifierEthernetInterfacesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSystemsIdentifierEthernetInterfacesInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
