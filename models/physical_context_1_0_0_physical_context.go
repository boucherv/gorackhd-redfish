package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*PhysicalContext100PhysicalContext physical context 1 0 0 physical context

swagger:model PhysicalContext.1.0.0_PhysicalContext
*/
type PhysicalContext100PhysicalContext string

// for schema
var physicalContext100PhysicalContextEnum []interface{}

func (m PhysicalContext100PhysicalContext) validatePhysicalContext100PhysicalContextEnum(path, location string, value PhysicalContext100PhysicalContext) error {
	if physicalContext100PhysicalContextEnum == nil {
		var res []PhysicalContext100PhysicalContext
		if err := json.Unmarshal([]byte(`["Room","Intake","Exhaust","Front","Back","Upper","Lower","CPU","GPU","Backplane","SystemBoard","PowerSupply","VoltageRegulator","StorageDevice","NetworkingDevice","ComputeBay","StorageBay","NetworkBay","ExpansionBay","PowerSupplyBay"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			physicalContext100PhysicalContextEnum = append(physicalContext100PhysicalContextEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, physicalContext100PhysicalContextEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this physical context 1 0 0 physical context
func (m PhysicalContext100PhysicalContext) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePhysicalContext100PhysicalContextEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
