package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*RackHDBootImageNetworkAddress rack h d boot image network address

swagger:model RackHD_BootImage_NetworkAddress
*/
type RackHDBootImageNetworkAddress struct {

	/* This is the gateway address.

	Required: true
	*/
	Gateway *string `json:"gateway"`

	/* This is the assigned static IP address of the network device

	Required: true
	*/
	IPAddr *string `json:"ipAddr"`

	/* This is the subnet mask

	Required: true
	*/
	Netmask *string `json:"netmask"`

	/* This is the VLAN ID represented as a array of integers with values of 0 to 4096
	 */
	VlanID string `json:"vlanId,omitempty"`
}

// Validate validates this rack h d boot image network address
func (m *RackHDBootImageNetworkAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPAddr(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetmask(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RackHDBootImageNetworkAddress) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageNetworkAddress) validateIPAddr(formats strfmt.Registry) error {

	if err := validate.Required("ipAddr", "body", m.IPAddr); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageNetworkAddress) validateNetmask(formats strfmt.Registry) error {

	if err := validate.Required("netmask", "body", m.Netmask); err != nil {
		return err
	}

	return nil
}
