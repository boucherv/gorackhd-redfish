package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*IPAddresses100IPV4Address IP addresses 1 0 0 ipv4 address

swagger:model IPAddresses.1.0.0_IPv4Address
*/
type IPAddresses100IPV4Address struct {

	/* This is the IPv4 Address.

	Pattern: ^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
	*/
	Address string `json:"Address,omitempty"`

	/* This indicates how the address was determined.

	Read Only: true
	*/
	AddressOrigin string `json:"AddressOrigin,omitempty"`

	/* This is the IPv4 gateway for this address.
	 */
	Gateway string `json:"Gateway,omitempty"`

	/* oem
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* This is the IPv4 Subnet mask.

	Pattern: ^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
	*/
	SubnetMask string `json:"SubnetMask,omitempty"`
}

// Validate validates this IP addresses 1 0 0 ipv4 address
func (m *IPAddresses100IPV4Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAddressOrigin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnetMask(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAddresses100IPV4Address) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if err := validate.Pattern("Address", "body", string(m.Address), `^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$`); err != nil {
		return err
	}

	return nil
}

var ipAddresses100Ipv4AddressTypeAddressOriginPropEnum []interface{}

// prop value enum
func (m *IPAddresses100IPV4Address) validateAddressOriginEnum(path, location string, value string) error {
	if ipAddresses100Ipv4AddressTypeAddressOriginPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Static","DHCP","BOOTP","IPv4LinkLocal"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			ipAddresses100Ipv4AddressTypeAddressOriginPropEnum = append(ipAddresses100Ipv4AddressTypeAddressOriginPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, ipAddresses100Ipv4AddressTypeAddressOriginPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPAddresses100IPV4Address) validateAddressOrigin(formats strfmt.Registry) error {

	if swag.IsZero(m.AddressOrigin) { // not required
		return nil
	}

	// value enum
	if err := m.validateAddressOriginEnum("AddressOrigin", "body", m.AddressOrigin); err != nil {
		return err
	}

	return nil
}

func (m *IPAddresses100IPV4Address) validateSubnetMask(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetMask) { // not required
		return nil
	}

	if err := validate.Pattern("SubnetMask", "body", string(m.SubnetMask), `^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$`); err != nil {
		return err
	}

	return nil
}
