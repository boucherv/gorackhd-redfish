package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Manager100ManagerType manager 1 0 0 manager type

swagger:model Manager.1.0.0_ManagerType
*/
type Manager100ManagerType string

// for schema
var manager100ManagerTypeEnum []interface{}

func (m Manager100ManagerType) validateManager100ManagerTypeEnum(path, location string, value Manager100ManagerType) error {
	if manager100ManagerTypeEnum == nil {
		var res []Manager100ManagerType
		if err := json.Unmarshal([]byte(`["ManagementController","EnclosureManager","BMC","RackManager","AuxiliaryController"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			manager100ManagerTypeEnum = append(manager100ManagerTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, manager100ManagerTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this manager 1 0 0 manager type
func (m Manager100ManagerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateManager100ManagerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
