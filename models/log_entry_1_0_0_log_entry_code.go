package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*LogEntry100LogEntryCode log entry 1 0 0 log entry code

swagger:model LogEntry.1.0.0_LogEntryCode
*/
type LogEntry100LogEntryCode string

// for schema
var logEntry100LogEntryCodeEnum []interface{}

func (m LogEntry100LogEntryCode) validateLogEntry100LogEntryCodeEnum(path, location string, value LogEntry100LogEntryCode) error {
	if logEntry100LogEntryCodeEnum == nil {
		var res []LogEntry100LogEntryCode
		if err := json.Unmarshal([]byte(`["Assert","Deassert","Lower Non-critical - going low","Lower Non-critical - going high","Lower Critical - going low","Lower Critical - going high","Lower Non-recoverable - going low","Lower Non-recoverable - going high","Upper Non-critical - going low","Upper Non-critical - going high","Upper Critical - going low","Upper Critical - going high","Upper Non-recoverable - going low","Upper Non-recoverable - going high","Transition to Idle","Transition to Active","Transition to Busy","State Deasserted","State Asserted","Predictive Failure deasserted","Predictive Failure asserted","Limit Not Exceeded","Limit Exceeded","Performance Met","Performance Lags","Transition to OK","Transition to Non-Critical from OK","Transition to Critical from less severe","Transition to Non-recoverable from less severe","Transition to Non-Critical from more severe","Transition to Critical from Non-recoverable","Transition to Non-recoverable","Monitor","Informational","Device Removed / Device Absent","Device Inserted / Device Present","Device Disabled","Device Enabled","Transition to Running","Transition to In Test","Transition to Power Off","Transition to On Line","Transition to Off Line","Transition to Off Duty","Transition to Degraded","Transition to Power Save","Install Error","Fully Redundant","Redundancy Lost","Redundancy Degraded","Non-redundant:Sufficient Resources from Redundant","Non-redundant:Sufficient Resources from Insufficient Resources","Non-redundant:Insufficient Resources","Redundancy Degraded from Fully Redundant","Redundancy Degraded from Non-redundant","D0 Power State","D1 Power State","D2 Power State","D3 Power State"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			logEntry100LogEntryCodeEnum = append(logEntry100LogEntryCodeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, logEntry100LogEntryCodeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this log entry 1 0 0 log entry code
func (m LogEntry100LogEntryCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogEntry100LogEntryCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
