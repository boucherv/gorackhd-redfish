package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
)

/*Thermal100Temperature This is the base type for addressable members of an array.

swagger:model Thermal.1.0.0_Temperature
*/
type Thermal100Temperature struct {

	/* Below normal range but not yet fatal.

	Read Only: true
	*/
	LowerThresholdCritical float64 `json:"LowerThresholdCritical,omitempty"`

	/* Below normal range and is fatal

	Read Only: true
	*/
	LowerThresholdFatal float64 `json:"LowerThresholdFatal,omitempty"`

	/* Below normal range

	Read Only: true
	*/
	LowerThresholdNonCritical float64 `json:"LowerThresholdNonCritical,omitempty"`

	/* Maximum value for ReadingCelsius

	Read Only: true
	*/
	MaxReadingRangeTemp float64 `json:"MaxReadingRangeTemp,omitempty"`

	/* This is the identifier for the member within the collection.
	 */
	MemberID string `json:"MemberId,omitempty"`

	/* Minimum value for ReadingCelsius

	Read Only: true
	*/
	MinReadingRangeTemp float64 `json:"MinReadingRangeTemp,omitempty"`

	/* Temperature sensor name.

	Read Only: true
	*/
	Name string `json:"Name,omitempty"`

	/* This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* Describes the area or device to which this temperature measurement applies.

	Read Only: true
	*/
	PhysicalContext PhysicalContext100PhysicalContext `json:"PhysicalContext,omitempty"`

	/* Temperature

	Read Only: true
	*/
	ReadingCelsius float64 `json:"ReadingCelsius,omitempty"`

	/* Describes the areas or devices to which this temperature measurement applies.

	Read Only: true
	*/
	RelatedItem []*Odata400IDRef `json:"RelatedItem,omitempty"`

	/* related item at odata count
	 */
	RelatedItemAtOdataCount Odata400Count `json:"RelatedItem@odata.count,omitempty"`

	/* related item at odata navigation link
	 */
	RelatedItemAtOdataNavigationLink *Odata400IDRef `json:"RelatedItem@odata.navigationLink,omitempty"`

	/* A numerical identifier to represent the temperature sensor

	Read Only: true
	*/
	SensorNumber float64 `json:"SensorNumber,omitempty"`

	/* status
	 */
	Status *ResourceStatus `json:"Status,omitempty"`

	/* Above normal range but not yet fatal.

	Read Only: true
	*/
	UpperThresholdCritical float64 `json:"UpperThresholdCritical,omitempty"`

	/* Above normal range and is fatal

	Read Only: true
	*/
	UpperThresholdFatal float64 `json:"UpperThresholdFatal,omitempty"`

	/* Above normal range

	Read Only: true
	*/
	UpperThresholdNonCritical float64 `json:"UpperThresholdNonCritical,omitempty"`
}

// Validate validates this thermal 1 0 0 temperature
func (m *Thermal100Temperature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhysicalContext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelatedItem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Thermal100Temperature) validatePhysicalContext(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalContext) { // not required
		return nil
	}

	if err := m.PhysicalContext.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Thermal100Temperature) validateRelatedItem(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedItem) { // not required
		return nil
	}

	return nil
}
