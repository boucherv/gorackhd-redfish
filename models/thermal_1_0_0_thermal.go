package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
)

/*Thermal100Thermal This is the schema definition for the Thermal properties.  It represents the properties for Temperature and Cooling.

swagger:model Thermal.1.0.0_Thermal
*/
type Thermal100Thermal struct {

	/* at odata context
	 */
	AtOdataContext Odata400Context `json:"@odata.context,omitempty"`

	/* at odata id
	 */
	AtOdataID Odata400ID `json:"@odata.id,omitempty"`

	/* at odata type
	 */
	AtOdataType Odata400Type `json:"@odata.type,omitempty"`

	/* description
	 */
	Description ResourceDescription `json:"Description,omitempty"`

	/* This is the definition for fans.

	Read Only: true
	*/
	Fans []*Thermal100Fan `json:"Fans,omitempty"`

	/* fans at odata count
	 */
	FansAtOdataCount Odata400Count `json:"Fans@odata.count,omitempty"`

	/* fans at odata navigation link
	 */
	FansAtOdataNavigationLink *Odata400IDRef `json:"Fans@odata.navigationLink,omitempty"`

	/* Id
	 */
	ID ResourceID `json:"Id,omitempty"`

	/* name
	 */
	Name ResourceName `json:"Name,omitempty"`

	/* This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* This structure is used to show redundancy for fans.  The Component ids will reference the members of the redundancy groups.

	Read Only: true
	*/
	Redundancy []RedundancyRedundancy `json:"Redundancy,omitempty"`

	/* redundancy at odata count
	 */
	RedundancyAtOdataCount Odata400Count `json:"Redundancy@odata.count,omitempty"`

	/* redundancy at odata navigation link
	 */
	RedundancyAtOdataNavigationLink *Odata400IDRef `json:"Redundancy@odata.navigationLink,omitempty"`

	/* status
	 */
	Status *ResourceStatus `json:"Status,omitempty"`

	/* This is the definition for temperature sensors.

	Read Only: true
	*/
	Temperatures []*Thermal100Temperature `json:"Temperatures,omitempty"`

	/* temperatures at odata count
	 */
	TemperaturesAtOdataCount Odata400Count `json:"Temperatures@odata.count,omitempty"`

	/* temperatures at odata navigation link
	 */
	TemperaturesAtOdataNavigationLink *Odata400IDRef `json:"Temperatures@odata.navigationLink,omitempty"`
}

// Validate validates this thermal 1 0 0 thermal
func (m *Thermal100Thermal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFans(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRedundancy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTemperatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Thermal100Thermal) validateFans(formats strfmt.Registry) error {

	if swag.IsZero(m.Fans) { // not required
		return nil
	}

	return nil
}

func (m *Thermal100Thermal) validateRedundancy(formats strfmt.Registry) error {

	if swag.IsZero(m.Redundancy) { // not required
		return nil
	}

	return nil
}

func (m *Thermal100Thermal) validateTemperatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Temperatures) { // not required
		return nil
	}

	return nil
}
