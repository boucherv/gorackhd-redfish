package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
)

/*ComputerSystem100ComputerSystem This schema defines a computer system and its respective properties.  A computer system represents a machine (physical or virtual) and the local resources such as memory, cpu and other devices that can be accessed from that machine.

swagger:model ComputerSystem.1.0.0_ComputerSystem
*/
type ComputerSystem100ComputerSystem struct {

	/* at odata context
	 */
	AtOdataContext Odata400Context `json:"@odata.context,omitempty"`

	/* at odata id
	 */
	AtOdataID Odata400ID `json:"@odata.id,omitempty"`

	/* at odata type
	 */
	AtOdataType Odata400Type `json:"@odata.type,omitempty"`

	/* actions
	 */
	Actions *ComputerSystem100ComputerSystemActions `json:"Actions,omitempty"`

	/* The user definable tag that can be used to track this computer system for inventory or other client purposes
	 */
	AssetTag string `json:"AssetTag,omitempty"`

	/* The version of the system BIOS or primary system firmware.
	 */
	BiosVersion string `json:"BiosVersion,omitempty"`

	/* Information about the boot settings for this system
	 */
	Boot *ComputerSystem100Boot `json:"Boot,omitempty"`

	/* description
	 */
	Description ResourceDescription `json:"Description,omitempty"`

	/* A reference to the collection of Ethernet interfaces associated with this system

	Read Only: true
	*/
	EthernetInterfaces *EthernetInterfaceCollectionEthernetInterfaceCollection `json:"EthernetInterfaces,omitempty"`

	/* The DNS Host Name, without any domain information
	 */
	HostName string `json:"HostName,omitempty"`

	/* Id
	 */
	ID ResourceID `json:"Id,omitempty"`

	/* The state of the indicator LED, used to identify the system
	 */
	IndicatorLED ComputerSystem100IndicatorLED `json:"IndicatorLED,omitempty"`

	/* links
	 */
	Links *ComputerSystem100ComputerSystemLinks `json:"Links,omitempty"`

	/* A reference to the collection of Log Services associated with this system

	Read Only: true
	*/
	LogServices *LogServiceCollectionLogServiceCollection `json:"LogServices,omitempty"`

	/* The manufacturer or OEM of this system.

	Read Only: true
	*/
	Manufacturer string `json:"Manufacturer,omitempty"`

	/* This object describes the central memory of the system in general detail.
	 */
	MemorySummary *ComputerSystem100MemorySummary `json:"MemorySummary,omitempty"`

	/* The model number for this system

	Read Only: true
	*/
	Model string `json:"Model,omitempty"`

	/* name
	 */
	Name ResourceName `json:"Name,omitempty"`

	/* This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* The part number for this system

	Read Only: true
	*/
	PartNumber string `json:"PartNumber,omitempty"`

	/* This is the current power state of the system

	Read Only: true
	*/
	PowerState ComputerSystem100PowerState `json:"PowerState,omitempty"`

	/* This object describes the central processors of the system in general detail.
	 */
	ProcessorSummary *ComputerSystem100ProcessorSummary `json:"ProcessorSummary,omitempty"`

	/* A reference to the collection of Processors associated with this system

	Read Only: true
	*/
	Processors *ProcessorCollectionProcessorCollection `json:"Processors,omitempty"`

	/* The manufacturer SKU for this system

	Read Only: true
	*/
	SKU string `json:"SKU,omitempty"`

	/* The serial number for this system

	Read Only: true
	*/
	SerialNumber string `json:"SerialNumber,omitempty"`

	/* A reference to the collection of storage devices associated with this system

	Read Only: true
	*/
	SimpleStorage *SimpleStorageCollectionSimpleStorageCollection `json:"SimpleStorage,omitempty"`

	/* status
	 */
	Status *ResourceStatus `json:"Status,omitempty"`

	/* The type of computer system represented by this resource.

	Read Only: true
	*/
	SystemType ComputerSystem100SystemType `json:"SystemType,omitempty"`

	/* The universal unique identifier (UUID) for this system

	Read Only: true
	*/
	UUID ResourceUUID `json:"UUID,omitempty"`
}

// Validate validates this computer system 1 0 0 computer system
func (m *ComputerSystem100ComputerSystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndicatorLED(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePowerState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSystemType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSystem100ComputerSystem) validateIndicatorLED(formats strfmt.Registry) error {

	if swag.IsZero(m.IndicatorLED) { // not required
		return nil
	}

	if err := m.IndicatorLED.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *ComputerSystem100ComputerSystem) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ComputerSystem100ComputerSystem) validatePowerState(formats strfmt.Registry) error {

	if swag.IsZero(m.PowerState) { // not required
		return nil
	}

	if err := m.PowerState.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *ComputerSystem100ComputerSystem) validateSystemType(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemType) { // not required
		return nil
	}

	if err := m.SystemType.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *ComputerSystem100ComputerSystem) validateUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := m.UUID.Validate(formats); err != nil {
		return err
	}

	return nil
}

/*ComputerSystem100ComputerSystemActions The Actions object contains the available custom actions on this resource.

swagger:model ComputerSystem100ComputerSystemActions
*/
type ComputerSystem100ComputerSystemActions struct {

	/* computer system reset
	 */
	NrComputerSystemReset *ComputerSystem100Reset `json:"#ComputerSystem.Reset,omitempty"`

	/* oem
	 */
	Oem interface{} `json:"Oem,omitempty"`
}

// Validate validates this computer system100 computer system actions
func (m *ComputerSystem100ComputerSystemActions) Validate(formats strfmt.Registry) error {
	return nil
}

/*ComputerSystem100ComputerSystemLinks Contains links to other resources that are related to this resource.

swagger:model ComputerSystem100ComputerSystemLinks
*/
type ComputerSystem100ComputerSystemLinks struct {

	/* An array of references to the chassis in which this system is contained

	Read Only: true
	*/
	Chassis []ChassisChassis `json:"Chassis,omitempty"`

	/* chassis at odata count
	 */
	ChassisAtOdataCount Odata400Count `json:"Chassis@odata.count,omitempty"`

	/* chassis at odata navigation link
	 */
	ChassisAtOdataNavigationLink *Odata400IDRef `json:"Chassis@odata.navigationLink,omitempty"`

	/* An array of ID[s] of resources that cool this computer system. Normally the ID will be a chassis or a specific set of fans.

	Read Only: true
	*/
	CooledBy []*Odata400IDRef `json:"CooledBy,omitempty"`

	/* cooled by at odata count
	 */
	CooledByAtOdataCount Odata400Count `json:"CooledBy@odata.count,omitempty"`

	/* cooled by at odata navigation link
	 */
	CooledByAtOdataNavigationLink *Odata400IDRef `json:"CooledBy@odata.navigationLink,omitempty"`

	/* An array of references to the Managers responsible for this system

	Read Only: true
	*/
	ManagedBy []ManagerManager `json:"ManagedBy,omitempty"`

	/* managed by at odata count
	 */
	ManagedByAtOdataCount Odata400Count `json:"ManagedBy@odata.count,omitempty"`

	/* managed by at odata navigation link
	 */
	ManagedByAtOdataNavigationLink *Odata400IDRef `json:"ManagedBy@odata.navigationLink,omitempty"`

	/* Oem extension object.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* An array of ID[s] of resources that power this computer system. Normally the ID will be a chassis or a specific set of powerSupplies

	Read Only: true
	*/
	PoweredBy []*Odata400IDRef `json:"PoweredBy,omitempty"`

	/* powered by at odata count
	 */
	PoweredByAtOdataCount Odata400Count `json:"PoweredBy@odata.count,omitempty"`

	/* powered by at odata navigation link
	 */
	PoweredByAtOdataNavigationLink *Odata400IDRef `json:"PoweredBy@odata.navigationLink,omitempty"`
}

// Validate validates this computer system100 computer system links
func (m *ComputerSystem100ComputerSystemLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChassis(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCooledBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateManagedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePoweredBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSystem100ComputerSystemLinks) validateChassis(formats strfmt.Registry) error {

	if swag.IsZero(m.Chassis) { // not required
		return nil
	}

	return nil
}

func (m *ComputerSystem100ComputerSystemLinks) validateCooledBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CooledBy) { // not required
		return nil
	}

	return nil
}

func (m *ComputerSystem100ComputerSystemLinks) validateManagedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagedBy) { // not required
		return nil
	}

	return nil
}

func (m *ComputerSystem100ComputerSystemLinks) validatePoweredBy(formats strfmt.Registry) error {

	if swag.IsZero(m.PoweredBy) { // not required
		return nil
	}

	return nil
}
