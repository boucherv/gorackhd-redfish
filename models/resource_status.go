package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
)

/*ResourceStatus resource status

swagger:model Resource_Status
*/
type ResourceStatus struct {

	/* This represents the health state of this resource in the absence of its dependent resources.

	Read Only: true
	*/
	Health ResourceHealth `json:"Health,omitempty"`

	/* This represents the overall health state from the view of this resource.

	Read Only: true
	*/
	HealthRollup ResourceHealth `json:"HealthRollup,omitempty"`

	/* oem
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* This indicates the known state of the resource, such as if it is enabled.

	Read Only: true
	*/
	State ResourceState `json:"State,omitempty"`
}

// Validate validates this resource status
func (m *ResourceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHealthRollup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceStatus) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if err := m.Health.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatus) validateHealthRollup(formats strfmt.Registry) error {

	if swag.IsZero(m.HealthRollup) { // not required
		return nil
	}

	if err := m.HealthRollup.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		return err
	}

	return nil
}
