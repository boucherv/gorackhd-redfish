package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*ResourceStatus resource status

swagger:model Resource_Status
*/
type ResourceStatus struct {

	/* This represents the health state of this resource in the absence of its dependent resources.

	Read Only: true
	*/
	Health string `json:"Health,omitempty"`

	/* This represents the overall health state from the view of this resource.

	Read Only: true
	*/
	HealthRollup string `json:"HealthRollup,omitempty"`

	/* oem
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* This indicates the known state of the resource, such as if it is enabled.

	Read Only: true
	*/
	State string `json:"State,omitempty"`
}

// Validate validates this resource status
func (m *ResourceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHealthRollup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var resourceStatusTypeHealthPropEnum []interface{}

// prop value enum
func (m *ResourceStatus) validateHealthEnum(path, location string, value string) error {
	if resourceStatusTypeHealthPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["OK","Warning","Critical"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			resourceStatusTypeHealthPropEnum = append(resourceStatusTypeHealthPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, resourceStatusTypeHealthPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceStatus) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthEnum("Health", "body", m.Health); err != nil {
		return err
	}

	return nil
}

var resourceStatusTypeHealthRollupPropEnum []interface{}

// prop value enum
func (m *ResourceStatus) validateHealthRollupEnum(path, location string, value string) error {
	if resourceStatusTypeHealthRollupPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["OK","Warning","Critical"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			resourceStatusTypeHealthRollupPropEnum = append(resourceStatusTypeHealthRollupPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, resourceStatusTypeHealthRollupPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceStatus) validateHealthRollup(formats strfmt.Registry) error {

	if swag.IsZero(m.HealthRollup) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthRollupEnum("HealthRollup", "body", m.HealthRollup); err != nil {
		return err
	}

	return nil
}

var resourceStatusTypeStatePropEnum []interface{}

// prop value enum
func (m *ResourceStatus) validateStateEnum(path, location string, value string) error {
	if resourceStatusTypeStatePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Enabled","Disabled","StandbyOffline","StandbySpare","InTest","Starting","Absent"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			resourceStatusTypeStatePropEnum = append(resourceStatusTypeStatePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, resourceStatusTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("State", "body", m.State); err != nil {
		return err
	}

	return nil
}
