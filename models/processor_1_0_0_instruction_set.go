package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Processor100InstructionSet processor 1 0 0 instruction set

swagger:model Processor.1.0.0_InstructionSet
*/
type Processor100InstructionSet string

// for schema
var processor100InstructionSetEnum []interface{}

func (m Processor100InstructionSet) validateProcessor100InstructionSetEnum(path, location string, value Processor100InstructionSet) error {
	if processor100InstructionSetEnum == nil {
		var res []Processor100InstructionSet
		if err := json.Unmarshal([]byte(`["x86","x86-64","IA-64","ARM-A32","ARM-A64","MIPS32","MIPS64","OEM"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			processor100InstructionSetEnum = append(processor100InstructionSetEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, processor100InstructionSetEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this processor 1 0 0 instruction set
func (m Processor100InstructionSet) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProcessor100InstructionSetEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
