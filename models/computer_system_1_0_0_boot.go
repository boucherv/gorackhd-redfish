package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
)

/*ComputerSystem100Boot This object contains the boot information for the current resource.

swagger:model ComputerSystem.1.0.0_Boot
*/
type ComputerSystem100Boot struct {

	/* Describes the state of the Boot Source Override feature
	 */
	BootSourceOverrideEnabled ComputerSystem100BootSourceOverrideEnabled `json:"BootSourceOverrideEnabled,omitempty"`

	/* The current boot source to be used at next boot instead of the normal boot device, if BootSourceOverrideEnabled is true.
	 */
	BootSourceOverrideTarget ComputerSystem100BootSource `json:"BootSourceOverrideTarget,omitempty"`

	/* This property is the Uefi Device Path of the device to boot from when BootSourceOverrideSupported is UefiTarget.
	 */
	UefiTargetBootSourceOverride string `json:"UefiTargetBootSourceOverride,omitempty"`
}

// Validate validates this computer system 1 0 0 boot
func (m *ComputerSystem100Boot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootSourceOverrideEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBootSourceOverrideTarget(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSystem100Boot) validateBootSourceOverrideEnabled(formats strfmt.Registry) error {

	if swag.IsZero(m.BootSourceOverrideEnabled) { // not required
		return nil
	}

	if err := m.BootSourceOverrideEnabled.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *ComputerSystem100Boot) validateBootSourceOverrideTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.BootSourceOverrideTarget) { // not required
		return nil
	}

	if err := m.BootSourceOverrideTarget.Validate(formats); err != nil {
		return err
	}

	return nil
}
