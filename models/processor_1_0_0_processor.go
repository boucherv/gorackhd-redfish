package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
)

/*Processor100Processor This is the schema definition for the Processor resource.  It represents the properties of a processor attached to a System.

swagger:model Processor.1.0.0_Processor
*/
type Processor100Processor struct {

	/* at odata context
	 */
	AtOdataContext Odata400Context `json:"@odata.context,omitempty"`

	/* at odata id
	 */
	AtOdataID Odata400ID `json:"@odata.id,omitempty"`

	/* at odata type
	 */
	AtOdataType Odata400Type `json:"@odata.type,omitempty"`

	/* description
	 */
	Description ResourceDescription `json:"Description,omitempty"`

	/* Id
	 */
	ID ResourceID `json:"Id,omitempty"`

	/* The instruction set of the processor

	Read Only: true
	*/
	InstructionSet Processor100InstructionSet `json:"InstructionSet,omitempty"`

	/* The processor manufacturer

	Read Only: true
	*/
	Manufacturer string `json:"Manufacturer,omitempty"`

	/* The maximum clock speed of the processor

	Read Only: true
	*/
	MaxSpeedMHz float64 `json:"MaxSpeedMHz,omitempty"`

	/* The product model number of this device

	Read Only: true
	*/
	Model string `json:"Model,omitempty"`

	/* name
	 */
	Name ResourceName `json:"Name,omitempty"`

	/* This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* The architecture of the processor

	Read Only: true
	*/
	ProcessorArchitecture Processor100ProcessorArchitecture `json:"ProcessorArchitecture,omitempty"`

	/* Identification information for this processor.
	 */
	ProcessorID *Processor100ProcessorID `json:"ProcessorId,omitempty"`

	/* The type of processor

	Read Only: true
	*/
	ProcessorType Processor100ProcessorType `json:"ProcessorType,omitempty"`

	/* The socket or location of the processor

	Read Only: true
	*/
	Socket string `json:"Socket,omitempty"`

	/* status
	 */
	Status *ResourceStatus `json:"Status,omitempty"`

	/* The total number of cores contained in this processor

	Read Only: true
	*/
	TotalCores float64 `json:"TotalCores,omitempty"`

	/* The total number of execution threads supported by this processor

	Read Only: true
	*/
	TotalThreads float64 `json:"TotalThreads,omitempty"`
}

// Validate validates this processor 1 0 0 processor
func (m *Processor100Processor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstructionSet(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessorArchitecture(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessorType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Processor100Processor) validateInstructionSet(formats strfmt.Registry) error {

	if swag.IsZero(m.InstructionSet) { // not required
		return nil
	}

	if err := m.InstructionSet.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Processor100Processor) validateProcessorArchitecture(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorArchitecture) { // not required
		return nil
	}

	if err := m.ProcessorArchitecture.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Processor100Processor) validateProcessorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorType) { // not required
		return nil
	}

	if err := m.ProcessorType.Validate(formats); err != nil {
		return err
	}

	return nil
}
