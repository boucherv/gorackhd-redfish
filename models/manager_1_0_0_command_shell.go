package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Manager100CommandShell Used for describing services like Serial Console, Command Shell or Graphical Console

swagger:model Manager.1.0.0_CommandShell
*/
type Manager100CommandShell struct {

	/* This object is used to enumerate the Command Shell connection types allowed by the implementation.

	Read Only: true
	*/
	ConnectTypesSupported []Manager100CommandConnectTypesSupported `json:"ConnectTypesSupported,omitempty"`

	/* Indicates the maximum number of service sessions, regardless of protocol, this manager is able to support.

	Read Only: true
	Minimum: 0
	*/
	MaxConcurrentSessions float64 `json:"MaxConcurrentSessions,omitempty"`

	/* Indicates if the service is enabled for this manager.
	 */
	ServiceEnabled bool `json:"ServiceEnabled,omitempty"`
}

// Validate validates this manager 1 0 0 command shell
func (m *Manager100CommandShell) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectTypesSupported(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxConcurrentSessions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Manager100CommandShell) validateConnectTypesSupported(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectTypesSupported) { // not required
		return nil
	}

	return nil
}

func (m *Manager100CommandShell) validateMaxConcurrentSessions(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxConcurrentSessions) { // not required
		return nil
	}

	if err := validate.Minimum("MaxConcurrentSessions", "body", float64(m.MaxConcurrentSessions), 0, false); err != nil {
		return err
	}

	return nil
}
