package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Chassis100ChassisType chassis 1 0 0 chassis type

swagger:model Chassis.1.0.0_ChassisType
*/
type Chassis100ChassisType string

// for schema
var chassis100ChassisTypeEnum []interface{}

func (m Chassis100ChassisType) validateChassis100ChassisTypeEnum(path, location string, value Chassis100ChassisType) error {
	if chassis100ChassisTypeEnum == nil {
		var res []Chassis100ChassisType
		if err := json.Unmarshal([]byte(`["Rack","Blade","Enclosure","StandAlone","RackMount","Card","Cartridge","Row","Pod","Expansion","Sidecar","Zone","Sled","Shelf","Drawer","Module","Component","Other"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			chassis100ChassisTypeEnum = append(chassis100ChassisTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, chassis100ChassisTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this chassis 1 0 0 chassis type
func (m Chassis100ChassisType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateChassis100ChassisTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
