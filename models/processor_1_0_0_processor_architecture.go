package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Processor100ProcessorArchitecture processor 1 0 0 processor architecture

swagger:model Processor.1.0.0_ProcessorArchitecture
*/
type Processor100ProcessorArchitecture string

// for schema
var processor100ProcessorArchitectureEnum []interface{}

func (m Processor100ProcessorArchitecture) validateProcessor100ProcessorArchitectureEnum(path, location string, value Processor100ProcessorArchitecture) error {
	if processor100ProcessorArchitectureEnum == nil {
		var res []Processor100ProcessorArchitecture
		if err := json.Unmarshal([]byte(`["x86","IA-64","ARM","MIPS","OEM"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			processor100ProcessorArchitectureEnum = append(processor100ProcessorArchitectureEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, processor100ProcessorArchitectureEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this processor 1 0 0 processor architecture
func (m Processor100ProcessorArchitecture) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProcessor100ProcessorArchitectureEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
