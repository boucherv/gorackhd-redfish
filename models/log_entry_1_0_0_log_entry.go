package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
)

/*LogEntry100LogEntry This resource represents the log record format for logs.  It is designed to be used for SEL logs from IPMI as well as Event Logs and OEM specific logs.  The EntryType field indicates the type of log and there are other properties dependent on it's value.

swagger:model LogEntry.1.0.0_LogEntry
*/
type LogEntry100LogEntry struct {

	/* at odata context
	 */
	AtOdataContext Odata400Context `json:"@odata.context,omitempty"`

	/* at odata id
	 */
	AtOdataID Odata400ID `json:"@odata.id,omitempty"`

	/* at odata type
	 */
	AtOdataType Odata400Type `json:"@odata.type,omitempty"`

	/* The time the log entry was created.

	Read Only: true
	*/
	Created strfmt.DateTime `json:"Created,omitempty"`

	/* description
	 */
	Description ResourceDescription `json:"Description,omitempty"`

	/* If the EntryType is SEL, this will have the entry code for the log entry.

	Read Only: true
	*/
	EntryCode LogEntry100LogEntryCode `json:"EntryCode,omitempty"`

	/* his is the type of log entry.

	Required: true
	Read Only: true
	*/
	EntryType LogEntry100LogEntryType `json:"EntryType"`

	/* Id
	 */
	ID ResourceID `json:"Id,omitempty"`

	/* links
	 */
	Links *LogEntry100LogEntryLinks `json:"Links,omitempty"`

	/* This property decodes from EntryType:  If it is Event then it is a message string.  Otherwise, it is SEL or Oem specific.  In most cases, this will be the actual Log Entry.

	Read Only: true
	*/
	Message string `json:"Message,omitempty"`

	/* The values of this property shall be any arguments for the message.

	Read Only: true
	*/
	MessageArgs []string `json:"MessageArgs,omitempty"`

	/* This property decodes from EntryType:  If it is Event then it is a message id.  Otherwise, it is SEL or Oem specific.  This value is only used for registries - for more information, see the specification.

	Read Only: true
	*/
	MessageID string `json:"MessageId,omitempty"`

	/* name
	 */
	Name ResourceName `json:"Name,omitempty"`

	/* This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* If the entry type is Oem, this will contain more information about the record format from the Oem.

	Read Only: true
	*/
	OemRecordFormat string `json:"OemRecordFormat,omitempty"`

	/* This property decodes from EntryType:  If it is SEL, it is the sensor number; if Event then the count of events.  Otherwise, it is Oem specific.

	Read Only: true
	*/
	SensorNumber float64 `json:"SensorNumber,omitempty"`

	/* If the EntryType is SEL, this will have the sensor type that the log entry pertains to.

	Read Only: true
	*/
	SensorType LogEntry100SensorType `json:"SensorType,omitempty"`

	/* This is the severity of the log entry.

	Read Only: true
	*/
	Severity LogEntry100EventSeverity `json:"Severity,omitempty"`
}

// Validate validates this log entry 1 0 0 log entry
func (m *LogEntry100LogEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntryCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntryType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessageArgs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSensorType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogEntry100LogEntry) validateEntryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.EntryCode) { // not required
		return nil
	}

	if err := m.EntryCode.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *LogEntry100LogEntry) validateEntryType(formats strfmt.Registry) error {

	if err := m.EntryType.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *LogEntry100LogEntry) validateMessageArgs(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageArgs) { // not required
		return nil
	}

	return nil
}

func (m *LogEntry100LogEntry) validateSensorType(formats strfmt.Registry) error {

	if swag.IsZero(m.SensorType) { // not required
		return nil
	}

	if err := m.SensorType.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *LogEntry100LogEntry) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if err := m.Severity.Validate(formats); err != nil {
		return err
	}

	return nil
}

/*LogEntry100LogEntryLinks The links object contains the links to other resources that are related to this resource.

swagger:model LogEntry100LogEntryLinks
*/
type LogEntry100LogEntryLinks struct {

	/* Oem extension object.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* This is the URI of the resource that caused the log entry

	Read Only: true
	*/
	OriginOfCondition *Odata400IDRef `json:"OriginOfCondition,omitempty"`
}

// Validate validates this log entry100 log entry links
func (m *LogEntry100LogEntryLinks) Validate(formats strfmt.Registry) error {
	return nil
}
