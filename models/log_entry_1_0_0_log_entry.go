package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*LogEntry100LogEntry This resource represents the log record format for logs.  It is designed to be used for SEL logs from IPMI as well as Event Logs and OEM specific logs.  The EntryType field indicates the type of log and there are other properties dependent on it's value.

swagger:model LogEntry.1.0.0_LogEntry
*/
type LogEntry100LogEntry struct {

	/* at odata context

	Read Only: true
	*/
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	/* at odata id

	Read Only: true
	*/
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	/* at odata type

	Read Only: true
	*/
	AtOdataType string `json:"@odata.type,omitempty"`

	/* The time the log entry was created.

	Read Only: true
	*/
	Created strfmt.DateTime `json:"Created,omitempty"`

	/* Provides a description of this resource and is used for commonality  in the schema definitions.

	Read Only: true
	*/
	Description string `json:"Description,omitempty"`

	/* If the EntryType is SEL, this will have the entry code for the log entry.

	Read Only: true
	*/
	EntryCode string `json:"EntryCode,omitempty"`

	/* his is the type of log entry.

	Required: true
	Read Only: true
	*/
	EntryType string `json:"EntryType"`

	/* Uniquely identifies the resource within the collection of like resources.

	Read Only: true
	*/
	ID string `json:"Id,omitempty"`

	/* links
	 */
	Links *LogEntry100LogEntryLinks `json:"Links,omitempty"`

	/* This property decodes from EntryType:  If it is Event then it is a message string.  Otherwise, it is SEL or Oem specific.  In most cases, this will be the actual Log Entry.

	Read Only: true
	*/
	Message string `json:"Message,omitempty"`

	/* The values of this property shall be any arguments for the message.

	Read Only: true
	*/
	MessageArgs []string `json:"MessageArgs,omitempty"`

	/* This property decodes from EntryType:  If it is Event then it is a message id.  Otherwise, it is SEL or Oem specific.  This value is only used for registries - for more information, see the specification.

	Read Only: true
	*/
	MessageID string `json:"MessageId,omitempty"`

	/* The name of the resource or array element.

	Read Only: true
	*/
	Name string `json:"Name,omitempty"`

	/* This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* If the entry type is Oem, this will contain more information about the record format from the Oem.

	Read Only: true
	*/
	OemRecordFormat string `json:"OemRecordFormat,omitempty"`

	/* This property decodes from EntryType:  If it is SEL, it is the sensor number; if Event then the count of events.  Otherwise, it is Oem specific.

	Read Only: true
	*/
	SensorNumber float64 `json:"SensorNumber,omitempty"`

	/* If the EntryType is SEL, this will have the sensor type that the log entry pertains to.

	Read Only: true
	*/
	SensorType string `json:"SensorType,omitempty"`

	/* This is the severity of the log entry.

	Read Only: true
	*/
	Severity string `json:"Severity,omitempty"`
}

// Validate validates this log entry 1 0 0 log entry
func (m *LogEntry100LogEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntryCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntryType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessageArgs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSensorType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var logEntry100LogEntryTypeEntryCodePropEnum []interface{}

// prop value enum
func (m *LogEntry100LogEntry) validateEntryCodeEnum(path, location string, value string) error {
	if logEntry100LogEntryTypeEntryCodePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Assert","Deassert","Lower Non-critical - going low","Lower Non-critical - going high","Lower Critical - going low","Lower Critical - going high","Lower Non-recoverable - going low","Lower Non-recoverable - going high","Upper Non-critical - going low","Upper Non-critical - going high","Upper Critical - going low","Upper Critical - going high","Upper Non-recoverable - going low","Upper Non-recoverable - going high","Transition to Idle","Transition to Active","Transition to Busy","State Deasserted","State Asserted","Predictive Failure deasserted","Predictive Failure asserted","Limit Not Exceeded","Limit Exceeded","Performance Met","Performance Lags","Transition to OK","Transition to Non-Critical from OK","Transition to Critical from less severe","Transition to Non-recoverable from less severe","Transition to Non-Critical from more severe","Transition to Critical from Non-recoverable","Transition to Non-recoverable","Monitor","Informational","Device Removed / Device Absent","Device Inserted / Device Present","Device Disabled","Device Enabled","Transition to Running","Transition to In Test","Transition to Power Off","Transition to On Line","Transition to Off Line","Transition to Off Duty","Transition to Degraded","Transition to Power Save","Install Error","Fully Redundant","Redundancy Lost","Redundancy Degraded","Non-redundant:Sufficient Resources from Redundant","Non-redundant:Sufficient Resources from Insufficient Resources","Non-redundant:Insufficient Resources","Redundancy Degraded from Fully Redundant","Redundancy Degraded from Non-redundant","D0 Power State","D1 Power State","D2 Power State","D3 Power State"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			logEntry100LogEntryTypeEntryCodePropEnum = append(logEntry100LogEntryTypeEntryCodePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, logEntry100LogEntryTypeEntryCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogEntry100LogEntry) validateEntryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.EntryCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntryCodeEnum("EntryCode", "body", m.EntryCode); err != nil {
		return err
	}

	return nil
}

var logEntry100LogEntryTypeEntryTypePropEnum []interface{}

// prop value enum
func (m *LogEntry100LogEntry) validateEntryTypeEnum(path, location string, value string) error {
	if logEntry100LogEntryTypeEntryTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Event","SEL","Oem"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			logEntry100LogEntryTypeEntryTypePropEnum = append(logEntry100LogEntryTypeEntryTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, logEntry100LogEntryTypeEntryTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogEntry100LogEntry) validateEntryType(formats strfmt.Registry) error {

	if err := validate.RequiredString("EntryType", "body", string(m.EntryType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateEntryTypeEnum("EntryType", "body", m.EntryType); err != nil {
		return err
	}

	return nil
}

func (m *LogEntry100LogEntry) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *LogEntry100LogEntry) validateMessageArgs(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageArgs) { // not required
		return nil
	}

	return nil
}

var logEntry100LogEntryTypeSensorTypePropEnum []interface{}

// prop value enum
func (m *LogEntry100LogEntry) validateSensorTypeEnum(path, location string, value string) error {
	if logEntry100LogEntryTypeSensorTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Platform Security Violation Attempt","Temperature","Voltage","Current","Fan","Physical Chassis Security","Processor","Power Supply / Converter","PowerUnit","CoolingDevice","Other Units-based Sensor","Memory","Drive Slot/Bay","POST Memory Resize","System Firmware Progress","Event Logging Disabled","System Event","Critical Interrupt","Button/Switch","Module/Board","Microcontroller/Coprocessor","Add-in Card","Chassis","ChipSet","Other FRU","Cable/Interconnect","Terminator","SystemBoot/Restart","Boot Error","BaseOSBoot/InstallationStatus","OS Stop/Shutdown","Slot/Connector","System ACPI PowerState","Watchdog","Platform Alert","Entity Presence","Monitor ASIC/IC","LAN","Management Subsystem Health","Battery","Session Audit","Version Change","FRUState"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			logEntry100LogEntryTypeSensorTypePropEnum = append(logEntry100LogEntryTypeSensorTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, logEntry100LogEntryTypeSensorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogEntry100LogEntry) validateSensorType(formats strfmt.Registry) error {

	if swag.IsZero(m.SensorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSensorTypeEnum("SensorType", "body", m.SensorType); err != nil {
		return err
	}

	return nil
}

var logEntry100LogEntryTypeSeverityPropEnum []interface{}

// prop value enum
func (m *LogEntry100LogEntry) validateSeverityEnum(path, location string, value string) error {
	if logEntry100LogEntryTypeSeverityPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["OK","Warning","Critical"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			logEntry100LogEntryTypeSeverityPropEnum = append(logEntry100LogEntryTypeSeverityPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, logEntry100LogEntryTypeSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogEntry100LogEntry) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("Severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

/*LogEntry100LogEntryLinks The links object contains the links to other resources that are related to this resource.

swagger:model LogEntry100LogEntryLinks
*/
type LogEntry100LogEntryLinks struct {

	/* Oem extension object.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* This is the URI of the resource that caused the log entry

	Read Only: true
	*/
	OriginOfCondition *Odata400IDRef `json:"OriginOfCondition,omitempty"`
}

// Validate validates this log entry100 log entry links
func (m *LogEntry100LogEntryLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginOfCondition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogEntry100LogEntryLinks) validateOriginOfCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.OriginOfCondition) { // not required
		return nil
	}

	if m.OriginOfCondition != nil {

		if err := m.OriginOfCondition.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
