package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*RackHDBootImageBootImage rack h d boot image boot image

swagger:model RackHD_BootImage_BootImage
*/
type RackHDBootImageBootImage struct {

	/* This is a list of Domain Name Servers.

	Required: true
	*/
	DNSServers []string `json:"dnsServers"`

	/* This is the domain for the target OS

	Required: true
	*/
	Domain *string `json:"domain"`

	/* The hostname for target OS.

	Required: true
	*/
	Hostname *string `json:"hostname"`

	/* install disk
	 */
	InstallDisk string `json:"installDisk,omitempty"`

	/* List of device names and static IP settings for network devices after OS installation.
	 */
	NetworkDevices []*RackHDBootImageNetworkDevice `json:"networkDevices,omitempty"`

	/* Name of the target OS to be installed

	Required: true
	*/
	OsName *string `json:"osName"`

	/* The external OS repository address, currently only supports HTTP

	Required: true
	*/
	Repo *string `json:"repo"`

	/* The password for the OS root account.

	Required: true
	*/
	RootPassword *string `json:"rootPassword"`

	/* This is the SshKey for the OS root account.
	 */
	RootSSHKey string `json:"rootSshKey,omitempty"`

	/* This is a list of user account information that will created after OS installation
	 */
	Users []*RackHDBootImageUsers `json:"users,omitempty"`

	/* The version number of target OS that needs to install.

	Required: true
	*/
	Version *string `json:"version"`
}

// Validate validates this rack h d boot image boot image
func (m *RackHDBootImageBootImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSServers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkDevices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOsName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRepo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRootPassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RackHDBootImageBootImage) validateDNSServers(formats strfmt.Registry) error {

	if err := validate.Required("dnsServers", "body", m.DNSServers); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateNetworkDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkDevices) { // not required
		return nil
	}

	return nil
}

var rackHDBootImageBootImageTypeOsNamePropEnum []interface{}

// prop value enum
func (m *RackHDBootImageBootImage) validateOsNameEnum(path, location string, value string) error {
	if rackHDBootImageBootImageTypeOsNamePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["CentOS","CentOS+KVM","ESXi","RHEL","RHEL+KVM"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			rackHDBootImageBootImageTypeOsNamePropEnum = append(rackHDBootImageBootImageTypeOsNamePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, rackHDBootImageBootImageTypeOsNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RackHDBootImageBootImage) validateOsName(formats strfmt.Registry) error {

	if err := validate.Required("osName", "body", m.OsName); err != nil {
		return err
	}

	// value enum
	if err := m.validateOsNameEnum("osName", "body", *m.OsName); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateRepo(formats strfmt.Registry) error {

	if err := validate.Required("repo", "body", m.Repo); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateRootPassword(formats strfmt.Registry) error {

	if err := validate.Required("rootPassword", "body", m.RootPassword); err != nil {
		return err
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	return nil
}

func (m *RackHDBootImageBootImage) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}
