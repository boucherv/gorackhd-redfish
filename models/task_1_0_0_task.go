package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Task100Task This is the schema definition for a Task resource.

swagger:model Task.1.0.0_Task
*/
type Task100Task struct {

	/* at odata context

	Read Only: true
	*/
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	/* at odata id

	Read Only: true
	*/
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	/* at odata type

	Read Only: true
	*/
	AtOdataType string `json:"@odata.type,omitempty"`

	/* Provides a description of this resource and is used for commonality  in the schema definitions.

	Read Only: true
	*/
	Description string `json:"Description,omitempty"`

	/* The date-time stamp that the task was last completed.

	Read Only: true
	*/
	EndTime strfmt.DateTime `json:"EndTime,omitempty"`

	/* Uniquely identifies the resource within the collection of like resources.

	Read Only: true
	*/
	ID string `json:"Id,omitempty"`

	/* This is an array of messages associated with the task.

	Read Only: true
	*/
	Messages []*Message100Message `json:"Messages,omitempty"`

	/* The name of the resource or array element.

	Read Only: true
	*/
	Name string `json:"Name,omitempty"`

	/* This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	 */
	Oem ResourceOem `json:"Oem,omitempty"`

	/* The date-time stamp that the task was last started.

	Read Only: true
	*/
	StartTime strfmt.DateTime `json:"StartTime,omitempty"`

	/* The state of the task.

	Read Only: true
	*/
	TaskState string `json:"TaskState,omitempty"`

	/* This is the completion status of the task.

	Read Only: true
	*/
	TaskStatus string `json:"TaskStatus,omitempty"`
}

// Validate validates this task 1 0 0 task
func (m *Task100Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task100Task) validateMessages(formats strfmt.Registry) error {

	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {

		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {

			if err := m.Messages[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

var task100TaskTypeTaskStatePropEnum []interface{}

// prop value enum
func (m *Task100Task) validateTaskStateEnum(path, location string, value string) error {
	if task100TaskTypeTaskStatePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["New","Starting","Running","Suspended","Interrupted","Pending","Stopping","Completed","Killed","Exception","Service"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			task100TaskTypeTaskStatePropEnum = append(task100TaskTypeTaskStatePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, task100TaskTypeTaskStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Task100Task) validateTaskState(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskState) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskStateEnum("TaskState", "body", m.TaskState); err != nil {
		return err
	}

	return nil
}

var task100TaskTypeTaskStatusPropEnum []interface{}

// prop value enum
func (m *Task100Task) validateTaskStatusEnum(path, location string, value string) error {
	if task100TaskTypeTaskStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["OK","Warning","Critical"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			task100TaskTypeTaskStatusPropEnum = append(task100TaskTypeTaskStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, task100TaskTypeTaskStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Task100Task) validateTaskStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskStatusEnum("TaskStatus", "body", m.TaskStatus); err != nil {
		return err
	}

	return nil
}
